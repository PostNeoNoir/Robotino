import socket
import json
import math
import sys
import io

# Перенаправление вывода для отладки
sys.stdout = io.StringIO()
sys.stderr = io.StringIO()

HOST = "192.168.0.100"  # IP
PORT = 10049  # Порт

client = None
number_target = 1  # номер первой целевой позиции


# Рассчитывает угол относительно оси X в диапазоне [-180, 180] градусов, с положительным направлением по часовой стрелке.
def calc_angle(x_cur: float,
               y_cur: float,
               x_goal: float,
               y_goal: float,
               ) -> float:
    # рассчитывание разницы координат по X и Y
    dx = x_goal - x_cur
    dy = y_goal - y_cur

    # Угол к цели
    angle_to_goal = math.degrees(math.atan2(dy, dx))

    # Приведение текущего угла и угла движения к цели к диапазону [-180, 180]
    #+180 чтобы убрать отрицательную часть, потом деление с остатком % на 360 чтобы получилось значение от 0 до 360 и потом вычитает 180, которую ранее добавляли
    #в итоге у нас угол от -180 до 180
    angle_to_goal_normalized = (angle_to_goal + 180) % 360 - 180

    return angle_to_goal_normalized

# Функция расчёта дистанции. Используем для определения достижения цели
def calc_dist(x0: float, y0: float, x1: float, y1: float) -> float:
    # xo, y0 - нынешние координаты
    # x1, y1 - координаты цели
    return ((x1 - x0) ** 2 + (y1 - y0) ** 2) ** 0.5


def connect_to_server():
    global client
    try:
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect((HOST, PORT))
        print(f"Connected to {HOST}:{PORT}")
    except socket.error as e:
        print(f"Failed to connect to server: {e}")
        sys.exit(1)


def start(RV):
    RV.writeFloat(1, 0)  # Инициализация V (скорости движения)
    RV.writeFloat(2, 0)  # Инициализация alfa (направления движения)
    RV.writeFloat(3, number_target)

    connect_to_server()


# Выполнить шаг: чтение входных данных, общение с сервером и запись выходов
#   Выполняется каждый шаг
def step(RV):
    global number_target
    round_period = 3

    try:
        print('start step')
        # Считывание данных положения
        data_pos = {
            "x_cur": round((RV.readFloat(5)), round_period),
            "y_cur": round((RV.readFloat(6)), round_period),
            "x_goal": round((RV.readFloat(7)), round_period),
            "y_goal": round((RV.readFloat(8)), round_period),
        }


        beta = calc_angle(
            data_pos['x_cur'],
            data_pos['y_cur'],
            data_pos['x_goal'],
            data_pos['y_goal'],
        )

        if (calc_dist(data_pos['x_cur'], data_pos['y_cur'], data_pos['x_goal'], data_pos['y_goal'])
                < 50):
            number_target += 1
            if number_target == 5:
                number_target = 1
                # отключение после достижения всех точек
                # client.close()
                # print("Disconnected from server")

        # запись данных для нечёткой логики
        data_fuzzy = {
            "Dis_f_l": round((RV.readFloat(1)), round_period),  # дистанция до препятствия спереди слева
            "Dis_b_l": round((RV.readFloat(2)), round_period),  # дистанция до препятствия сзади справа
            "Dis_b_r": round((RV.readFloat(3)), round_period),  # дистанция до препятствия спереди справа
            "Dis_f_r": round((RV.readFloat(4)), round_period),  # дистанция до препятствия сзади слева
            "beta_in": round(beta, 3)  # Угол направления к цели
        }

        # Отправка данных на сервер
        data_fuzzy_json = json.dumps(data_fuzzy) #перевод в строку json
        client.sendall(data_fuzzy_json.encode('utf-8')) #перевод в байты и отправка
        print(f"Sent: {data_fuzzy_json}")

        # Получение ответа от сервера
        data_from_server = client.recv(1024).decode() #1024 байт за вызов recv
        velocity_json_data = json.loads(data_from_server)

        # Извлечение скорости и направления
        V_from_server = velocity_json_data.get("V", 0) #пытается получить значение из velocity_json_data, если не удалось задает его 0
        alfa_from_server = velocity_json_data.get("alfa_out", 0)

        # Обновление данных для Robotino
        RV.writeFloat(1, V_from_server)  # Установка скорости
        RV.writeFloat(2, alfa_from_server)  # Установка угла направления
        RV.writeFloat(3, number_target)  # Установка целевой координаты

    except json.JSONDecodeError as e:
        print(f"JSON error: {e}")
    except socket.error as e:
        print(f"Socket error: {e}")
    except Exception as e:
        print(f"Another error {e}")


def stop(RV):
    print("stop")
    if client:
        try:
            client.close()
            print("Disconnected from server")
        except socket.error as e:
            print(f"Error while disconnecting: {e}")


def cleanup(RV):
    """Clean up resources."""
    print("cleanup")
