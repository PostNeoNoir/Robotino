import json
import socket
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Создание сервера
SERVER_IP = "192.168.0.100"  # IP
SERVER_PORT = 10049  # Порт
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((SERVER_IP, SERVER_PORT))
print(f"Server created | {SERVER_IP}:{SERVER_PORT}")
server.listen(1)


class RobotinoControlSystem():
    # Функция создания нового класса
    def __init__(self):
        self.precision_of_ranges = 0.5  # Точность разметки на диапазонах
        self._make_inputs_outputs() #создает входные и выходные переменные нечеткой логики
        self._make_rules_and_control_system() #создает набор правил
        print(f'Control system done!')

    # Принимаем входные данные
    def input_values(self, distance_f_l, distance_b_r, distance_f_r, distance_b_l, beta_angle_in):
        self.sim.input['Dis_f_l'] = distance_f_l  # дистанция до препятствия спереди слева
        self.sim.input['Dis_b_r'] = distance_b_r  # дистанция до препятствия сзади справа
        self.sim.input['Dis_f_r'] = distance_f_r  # дистанция до препятствия спереди справа
        self.sim.input['Dis_b_l'] = distance_b_l  # дистанция до препятствия сзади слева
        self.sim.input['beta_in'] = beta_angle_in  # направление на цель

    # Расчет скорости и направления
    def compute_outputs(self):
        self.sim.compute() # запускает процесс рассуждения когда поступают новые входные данные
        return self.sim.output['V'], self.sim.output['alfa_out'] # возвращаем скорость и угол

    # функция определения входных и выходных параметров в нечёткой логике
    def _make_inputs_outputs(self):
        # Определение входных переменных (граничные значения, точность, имя)
        self.Dist_front_left = ctrl.Antecedent(np.arange(0, 40, self.precision_of_ranges), 'Dis_f_l')
        self.Dist_back_right = ctrl.Antecedent(np.arange(0, 40, self.precision_of_ranges), 'Dis_b_r')
        self.Dist_front_right = ctrl.Antecedent(np.arange(0, 40, self.precision_of_ranges), 'Dis_f_r')
        self.Dist_back_left = ctrl.Antecedent(np.arange(0, 40, self.precision_of_ranges), 'Dis_b_l')
        self.dir_input_beta = ctrl.Antecedent(np.arange(-220, 220, self.precision_of_ranges), 'beta_in')

        # Определение выходных переменных (им граничные значения, точность, имя)
        self.Velocity_out = ctrl.Consequent(np.arange(100, 240, self.precision_of_ranges), 'V')
        self.dir_output_alfa = ctrl.Consequent(np.arange(-220, 220, self.precision_of_ranges), 'alfa_out')

        # Нечёткие множества для входных переменных
        ## Фаззификация дистанции
        self.Dist_front_left['Close'] = fuzz.trapmf(self.Dist_front_left.universe, [0, 0, 5, 10])  # определение близкой дистанции
        self.Dist_front_left['Middle'] = fuzz.trapmf(self.Dist_front_left.universe, [5, 10, 20, 30])  # определение средней дистанции
        self.Dist_front_left['Far'] = fuzz.trapmf(self.Dist_front_left.universe, [20, 30, 40, 40])  # определение дальней дистанции

        self.Dist_back_right['Close'] = fuzz.trapmf(self.Dist_back_right.universe, [0, 0, 5, 10])  # определение близкой дистанции
        self.Dist_back_right['Middle'] = fuzz.trapmf(self.Dist_back_right.universe, [5, 10, 20, 30])  # определение средней дистанции
        self.Dist_back_right['Far'] = fuzz.trapmf(self.Dist_back_right.universe, [20, 30, 40, 40])  # определение дальней дистанции

        self.Dist_front_right['Close'] = fuzz.trapmf(self.Dist_front_right.universe, [0, 0, 5, 10])  # определение близкой дистанции
        self.Dist_front_right['Middle'] = fuzz.trapmf(self.Dist_front_right.universe, [5, 10, 20, 30])  # определение средней дистанции
        self.Dist_front_right['Far'] = fuzz.trapmf(self.Dist_front_right.universe, [20, 30, 40, 40])  # определение дальней дистанции

        self.Dist_back_left['Close'] = fuzz.trapmf(self.Dist_back_left.universe, [0, 0, 5, 10])  # определение близкой дистанции
        self.Dist_back_left['Middle'] = fuzz.trapmf(self.Dist_back_left.universe, [5, 10, 20, 30])  # определение средней дистанции
        self.Dist_back_left['Far'] = fuzz.trapmf(self.Dist_back_left.universe, [20, 30, 40, 40])  # определение дальней дистанции

        ## Фаззификация угла направления на целевую точку
        self.dir_input_beta['Back-Right'] = fuzz.trapmf(self.dir_input_beta.universe, [-210, -137, -133, -49])  # определение 4 участка, 6 и 7 датчики
        self.dir_input_beta['Front-Right'] = fuzz.trapmf(self.dir_input_beta.universe, [-131, -49, -41, 41])  # определение 1 участка, 8 и 9 датчики
        self.dir_input_beta['Front-Left'] = fuzz.trapmf(self.dir_input_beta.universe, [-41, 41, 49, 131])  # определение 2 участка, 1, 2 и 3 датчики
        self.dir_input_beta['Back-Left'] = fuzz.trapmf(self.dir_input_beta.universe, [49, 131, 139, 210])  # определение 3 участка, 4 и 5 датчики

        # Нечёткие множества для выходных переменных
        ## Фаззификация скорости
        self.Velocity_out['Low'] = fuzz.trapmf(self.Velocity_out.universe, [100, 100, 120, 140])  # определение низкой скорости
        self.Velocity_out['Average'] = fuzz.trapmf(self.Velocity_out.universe, [120, 140, 180, 200])  # определение средней скорости
        self.Velocity_out['High'] = fuzz.trapmf(self.Velocity_out.universe, [180, 200, 220, 220])  # определение высокой скорости

        ## Фаззификация угла движения (аналогично углу beta)
        self.dir_output_alfa['Back-Right'] = fuzz.trapmf(self.dir_output_alfa.universe, [-210, -137, -133, -49]) # определение 4 участка, 6 и 7 датчики
        self.dir_output_alfa['Front-Right'] = fuzz.trapmf(self.dir_output_alfa.universe, [-131, -49, -41, 41]) # определение 1 участка, 8 и 9 датчики
        self.dir_output_alfa['Front-Left'] = fuzz.trapmf(self.dir_output_alfa.universe, [-41, 41, 49, 131]) # определение 2 участка, 1, 2 и 3 датчики
        self.dir_output_alfa['Back-Left'] = fuzz.trapmf(self.dir_output_alfa.universe, [49, 131, 139, 210]) # определение 3 участка, 4 и 5 датчики

    def _make_rules_and_control_system(self):
        # Определение правил нечёткой логики
        self.rules = [
            # структура правил: ctrl.Rule((вход_1[значение]...), (выход_1[значение], выход_2[значение])),

            ## Правила для дальней дистанции
            ctrl.Rule((self.Dist_front_left['Far'] & self.Dist_back_right['Far'] & self.Dist_front_right['Far'] &
                       self.Dist_back_left['Far']) & self.dir_input_beta['Front-Left'],
                      (self.Velocity_out['Low'], self.dir_output_alfa['Front-Left'])),

            ctrl.Rule((self.Dist_front_left['Far'] & self.Dist_back_right['Far'] & self.Dist_front_right['Far'] &
                       self.Dist_back_left['Far']) & self.dir_input_beta['Front-Right'],
                      (self.Velocity_out['Low'], self.dir_output_alfa['Front-Right'])),

            ctrl.Rule((self.Dist_front_left['Far'] & self.Dist_back_right['Far'] & self.Dist_front_right['Far'] &
                       self.Dist_back_left['Far']) & self.dir_input_beta['Back-Right'],
                      (self.Velocity_out['Low'], self.dir_output_alfa['Back-Right'])),

            ctrl.Rule((self.Dist_front_left['Far'] & self.Dist_back_right['Far'] & self.Dist_front_right['Far'] &
                       self.Dist_back_left['Far']) & self.dir_input_beta['Back-Left'],
                      (self.Velocity_out['Low'], self.dir_output_alfa['Back-Left'])),

            ## Правила для средней дистанции
            ctrl.Rule(self.dir_input_beta['Front-Left'] &
                      (self.Dist_back_left['Middle'] | self.Dist_front_left['Middle']),
                      (self.Velocity_out['Average'], self.dir_output_alfa['Front-Right'])),

            ctrl.Rule(self.dir_input_beta['Front-Right'] &
                      (self.Dist_front_left['Middle'] | self.Dist_back_left['Middle']),
                      (self.Velocity_out['Average'], self.dir_output_alfa['Back-Right'])),

            ctrl.Rule(self.dir_input_beta['Back-Right'] &
                      (self.Dist_front_right['Middle'] | self.Dist_back_right['Middle']),
                      (self.Velocity_out['Average'], self.dir_output_alfa['Back-Left'])),

            ctrl.Rule(self.dir_input_beta['Back-Left'] &
                      (self.Dist_front_right['Middle'] | self.Dist_back_right['Middle']),
                      (self.Velocity_out['Average'], self.dir_output_alfa['Front-Left'])),



            ## Правила для ближней дистанции
            # Правила для движения Front-Left (вверх-влево)
            ## Если препятствие слева (переднее-левое или заднее-левое) - уходим вправо
            ctrl.Rule(self.dir_input_beta['Front-Left'] &
                      (self.Dist_front_left['Close'] | self.Dist_back_left['Close']),
                      (self.Velocity_out['Average'], self.dir_output_alfa['Front-Right'])),



            # Правила для движения Front-Right (вверх-вправо)
            ## Если препятствие справа - уходим влево
            ctrl.Rule(self.dir_input_beta['Front-Right'] &
                      (self.Dist_front_left['Close'] | self.Dist_back_left['Close']),
                      (self.Velocity_out['Average'], self.dir_output_alfa['Back-Right'])),



            # Аналогичные правила для Back-Left и Back-Right
            ## Back-Left (назад-влево)
            ctrl.Rule(self.dir_input_beta['Back-Left'] &
                      (self.Dist_front_right['Close'] | self.Dist_back_right['Close']),
                      (self.Velocity_out['Average'], self.dir_output_alfa['Front-Left'])),



            ## Back-Right (назад-вправо)
            ctrl.Rule(self.dir_input_beta['Back-Right'] &
                      (self.Dist_front_right['Close'] | self.Dist_back_right['Close']),
                      (self.Velocity_out['Average'], self.dir_output_alfa['Back-Left'])),


        ]

        self.control_system = ctrl.ControlSystem(self.rules)# объект системы управления на основе правил (все правила в одну системе, не принимает решения!)
        self.sim = ctrl.ControlSystemSimulation(self.control_system) # обученный мозг, который принимает решение на основании правил


# Создание системы управления
control_system = RobotinoControlSystem()

print("Waiting for client connection...")
while True:
    client_socket, client_address = server.accept()
    print(f"Client connected: {client_address}")

    round_period = 3
    try:
        while True:
            data = client_socket.recv(1024).decode()
            if not data:
                break
            # распаковка пакета данных от клиента
            input_data = json.loads(data)
            distance_f_l = input_data["Dis_f_l"]
            distance_b_r = input_data["Dis_b_r"]
            distance_f_r = input_data["Dis_f_r"]
            distance_b_l = input_data["Dis_b_l"]
            beta_angle_in = input_data["beta_in"]

            try:
                control_system.input_values(distance_f_l, distance_b_r, distance_f_r, distance_b_l, beta_angle_in) #передаем данные в нечеткую логику
                velocity, alfa_angle_out = control_system.compute_outputs() #Нечеткая логика принимает решение и записыает его в velocity и alfa

                # упаковка расчитанных скоростей в json отправка клиенту
                output_data = json.dumps({"V": round(velocity, round_period), "alfa_out": round(alfa_angle_out, round_period)})
                client_socket.send(output_data.encode())

            except json.JSONDecodeError:
                print("JSON error")

            except Exception as e:
                print(f"All error: {e}")

    except (ConnectionResetError, BrokenPipeError):
        print("Client disconnected")
    except Exception as e:
        print(f"All error: {e}")
    finally:
        try:
            client_socket.close()
        except:
            pass
